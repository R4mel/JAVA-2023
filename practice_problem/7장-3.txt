
// 이 프로그램은 난수 발생을 위한 임의의 seed 값 하나를 입력 받고 
// 이를 기반으로 ID(학번:정수) 리스트와 Name(이름:문자열) 리스트를 생성한다. 그런 후
// 1) ID 리스트의 모든 원소를 ID 큐에 저장하고
// 2) ID 리스트의 앞쪽 2개 원소 삭제 후 Name 리스트와 ID 큐의 원소들을 모두 TreeMap에 삽입하는
// 등의 작업을 수행한다.
// 이 기능들은 이후에 다시 확장된다.
//
// 먼저 구현하고자 하는 프로그램의 아래 [프로그램 실행 결과 1]을 보고 프로그램의 기능을 파악하라.

===============================================================================
== 프로그램 실행 결과 1
== 오른쪽 끝에 있는 //는 주석이다.
=============================================================================== 
***********************
random number seed? 0                           // 0: 사용자 입력, 임의의 숫자를 입력하면 됨
***********************
ID   List:	[13, 12, 14, 11, 15]            // 자동 생성된 학번 ID(정수) 리스트
Name List:	[tom, sandy, nana, bob, alice]  // 자동 생성된 이름 Name(문자열) 리스트
                                                // 일부 원소 삭제 후 
ID   Queue:	[14, 11, 15]                    // ID 리스트의 원소를 ID 큐에 저장
<Name, ID> Map:	{nana=15, sandy=11, tom=14}     // Name 리스트와 ID 큐의 원소들을 TreeMap에 삽입
                                                // 맵의 각 원소에 대해 (키=값) 형태로 출력됨
***********************
random number seed? -1                          // 프로그램 종료하기 위해 -1 입력
***********************

/******************************************************************************
 * 코드 추가
 ******************************************************************************/
// 이 프로그램은 아래 정수용 큐인 GQueue_Integer 클래스, static 메소드를 가진 GenericMethod 클래스,
// 이들을 테스트하는 Executor 클래스, main()을 포함하고 있는 P2 클래스 등 네 개의 클래스로 구성되고
// 이들은 모두 이미 구현되어 있다.
// 이클립스에서 새로운 프로젝트 P2을 만들고 소스 파일 이름을 반드시 P2.java로 하고 
// 아래 클래스들을 소스 파일에 복사하라.
// 이 프로그램의 실행결과는 위 [프로그램 실행 결과 1]과 같다.
===============================================================================

import java.util.*;
import java.io.*;

class GQueue_Integer {   // 문제 2-2
    private int front, rear, count;
    private Object que[];

    public GQueue_Integer() { front = rear = count = 0; que = new Object[10]; }

    public boolean enque(int t) { 
        if (count == 10) return false; 
        que[rear] = t;
        rear = (rear+1) % 10;
        count++;
        return true;
    }

    public Integer deque() { 
        if (count == 0) return null;
        @SuppressWarnings("unchecked")
        int t = (int)que[front];
        front = (front+1) % 10;
        count--;
        return t;
    }

    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append("[");
        if (count > 0)
            sb.append(que[front]);
        for (int i = 1; i < count; ++i)
            sb.append(", " + que[(front+i)%10]);
        sb.append("]");
        return sb.toString();
    }
}

class GenericMethod 
{
    // 문제 2-2, 문제 2-3
    static public TreeMap<String, Integer>  toTreeMap(List<String> keyList, GQueue_Integer valueQ) {
        TreeMap<String, Integer> map = new TreeMap<>();
        for (int i = 0; i < keyList.size(); ++i) {
            Integer value = valueQ.deque();
            if (value == null)
                break;
            else
                map.put(keyList.get(i), value);
        }
        return map;
    }

    static public void swap(List<Integer> list, int i, int j) { // 문제 2-1
        int tmp = list.get(i);
        list.set(i, list.get(j));
        list.set(j, tmp);
    }
}

class Executor
{
    public static Scanner scanner = new Scanner(System.in);
    public static boolean autoCheck = false;
    public static int seed;
    private static List<Integer> ids;
    private static List<String>  names;
    private static List<Integer> idList;
    private static List<String>  nameList;
    private static GQueue_Integer idQ;
    //private static GQueue<String>  nameQ;                    // 문제 2-2
 
    public static void init() {
        ids = new ArrayList<Integer>();
        ids.add(15); ids.add(14); ids.add(13); ids.add(12); ids.add(11);
        names = new ArrayList<String>();
        names.add("tom"); names.add("sandy"); names.add("nana"); names.add("bob"); names.add("alice");

        idList   = new ArrayList<>(ids);
        nameList = new ArrayList<>(names);
        idQ      = new GQueue_Integer();                       // 문제 2-2
        //nameQ    = new GQueue<>();                           // 문제 2-2
    }

    public static void genericMethodSwap() {
        Random rnd = new Random(seed);
        for (int i = 0; i < idList.size(); i++) {
            GenericMethod.swap(idList,   i, rnd.nextInt(idList.size()));
            //GenericMethod.swap(nameList, i, rnd.nextInt(nameList.size())); // 문제 2-1 호출
         }
        System.out.println("ID   List:\t" + idList);
        System.out.println("Name List:\t" + nameList);
        System.out.println();
    }
    
    public static void genericClassQueue() {
        for (int i = 0; i < ids.size(); ++i) {
            idQ.enque(idList.get(i));
            //nameQ.enque(nameList.get(i));                   // 문제 2-2
        }
        for (int i = 0; i < 2; ++i) // 큐의 앞쪽 두개 원소 삭제
            idQ.deque();
        //for (int i = 0; i < 3; ++i) // 세개 원소 삭제           // 문제 2-2
            //nameQ.deque();                                  // 문제 2-2
        System.out.println("ID   Queue:\t" + idQ);
        //System.out.println("Name Queue:\t"  + nameQ);       // 문제 2-2
        System.out.println();
    }
    
    public static void genericMethodToTreeMap() {
        //TreeMap<Integer, String> mapIdName = GenericMethod.toTreeMap(idList,   nameQ);  // 문제 2-3
        TreeMap<String, Integer> mapNameId = GenericMethod.toTreeMap(nameList, idQ);      
        //System.out.println("<ID, Name> Map:\t" + mapIdName);                            // 문제 2-3
        System.out.println("<Name, ID> Map:\t" + mapNameId);
        System.out.println();
    }
    
    public static void run() {
        init();
        genericMethodSwap();       // 문제 2-1 호출
        genericClassQueue();       // 문제 2-2 호출
        genericMethodToTreeMap();  // 문제 2-3 호출
    }

    public static boolean getInput() {
        System.out.println("***********************");
        System.out.print("random number seed? ");
        seed = scanner.nextInt();
        if (autoCheck)
            System.out.println(seed);
        System.out.println("***********************");
        return seed != -1;
    }
}

public class P2 
{
    public static void main(String[] args) {
        while (Executor.getInput())
        	Executor.run();
        //new AutoCheck(false);
    }
}

/******************************************************************************
 * 문제 2-1
 ******************************************************************************/
// 위 GenericMethod.swap()은 인자로 넘어 온 list 내의 인덱스 i와 j를 가진 원소의 값을 
// 서로 바꾸어 주는 메소드다.
// 1) 이 메소드가 List<Integer> 와 List<String> 등 서로 다른 타입의 리스트에 대해서도
//    호출될 수 있도록 swap() 메소드를 제네릭 메소드로 변경하라.
//
// 제네릭 메소드 swap()이 정상적으로 구현되었는지 확인하기 위해 
// 2) 위 Executor::genericMethodSwap() 내의 GenericMethod.swap(nameList, ...)의 
//    주석을 아래처럼 풀어라.

    GenericMethod.swap(idList,   i, rnd.nextInt(idList.size()));
    GenericMethod.swap(nameList, i, rnd.nextInt(nameList.size())); // 문제 2-1

// 그런 후 프로그램을 실행하면 아래처럼 실행되어야 한다.
***********************
random number seed? 0  // 0: 사용자 입력, 임의의 숫자를 입력하면 됨
***********************
ID   List:	[13, 12, 15, 11, 14]
Name List:	[bob, sandy, tom, nana, alice] // 이름 순서가 이처럼 변경되어 있어야 함
... // 앞과 동일

/******************************************************************************
 * 문제 2-2
 ******************************************************************************/
// 위 GQueue_Integer 클래스는 정수형 값만 큐에 저장할 수 있다.
// 1) 이 클래스가 정수 뿐만 아니라 다른 임의의 클래스 E의 객체들도 큐의 원소로 저장할 수 있도록 
//    제네릭 클래스 GQueue<E>로 변경하라. 여기서 E는 타입 매개 변수이다.
//
// 제네릭 큐가 정상적으로 구현되었는지 확인하기 위해
// 2) Executor 클래스 내에서 모든 "// 문제 2-2"로 표시된 문장의 맨 앞쪽에 있는 주석을 모두 풀어라.
// 3) Executor 클래스의 멤버 변수 선언의 주석을 풀고 큐를 선언하는 두 문장을 아래처럼 수정하라.

    private static GQueue<Integer> idQ;
    private static GQueue<String>  nameQ;

// 4) Executor::init()의 주석을 풀고 큐를 생성하는 두 문장을 아래처럼 수정하라.

    idQ   = new GQueue<>();
    nameQ = new GQueue<>();

// 5) GenericMethod::toTreeMap()의 두번째 인자를 아래처럼 GQueue<Integer>로 수정하라.
    toTreeMap(List<String> keyList, GQueue<Integer> valueQ) {

// 그런 후 프로그램을 실행하면 아래처럼 실행되어야 한다.
***********************
random number seed? 0  // 0: 사용자 입력, 임의의 숫자를 입력하면 됨
***********************
.. // 앞과 동일
ID   Queue:	[15, 11, 14]   // 앞쪽 두 개 원소는 이미 삭제되었음
Name Queue:	[nana, alice]  // 앞쪽 세 개 원소는 이미 삭제되었음
... // 앞과 동일

/******************************************************************************
 * 문제 2-3
 ******************************************************************************/
static public TreeMap<String,Integer> toTreeMap(List<String> keyList,GQueue<Integer> valueQ) {  // 문제 2-3

// 위 GenericMethod.toTreeMap()은 인자로 넘어 온 keyList의 각 원소를 키로 사용하고,
// valueQ의 각 원소를 값으로 사용하여 TreeMap 객체를 삽입한 후 이를 반환하는 메소드이다.
// 현재는 문자열 리스트와 정수형 큐, 즉 (List<String> keyList, GQueue<Integer> valueQ)
// 인자에 대해서만 작동한다.
// 1) 이 메소드가 서로 다른 타입인 K와 V에 대해 (List<K>, GQueue<V>) 인자에 대해서도 호출되고,
//    그에 상응하는 TreeMap<>을 반환할 수 있도록 toTreeMap() 메소드를 제네릭 메소드로 변경하라.

// 제네릭 메소드 toTreeMap()이 정상적으로 구현되었는지 확인하기 위해
// 2) 위 Executor::genericMethodToTreeMap() 내의 모든 "// 문제 2-3"로 표시된 
//    문장의 맨 앞쪽에 있는 주석을 모두 풀어라.

// 그런 후 seed 입력 값 0, 1에 대해 각각 아래처럼 실행되어야 한다.

===============================================================================
== 프로그램 실행 결과 2
=============================================================================== 
***********************
random number seed? 0  // 0: 사용자 입력, 임의의 숫자를 입력하면 됨
***********************
ID   List:	[13, 12, 15, 11, 14]
Name List:	[bob, sandy, tom, nana, alice]

ID   Queue:	[15, 11, 14]
Name Queue:	[nana, alice]

<ID, Name> Map:	{12=alice, 13=nana}
<Name, ID> Map:	{bob=15, sandy=11, tom=14}

***********************
random number seed? 1  // 사용자 입력: 위 과정 반복
***********************
ID   List:	[15, 13, 11, 12, 14]
Name List:	[bob, sandy, alice, nana, tom]

ID   Queue:	[11, 12, 14]
Name Queue:	[nana, tom]

<ID, Name> Map:	{13=tom, 15=nana}
<Name, ID> Map:	{alice=14, bob=11, sandy=12}

***********************
random number seed? -1 // 프로그램 종료하기 위해 -1 입력
***********************

/******************************************************************************
 * 프로그램이 정상적으로 실행되면 아래 내용을 추가적으로 수행하라.
 * ----------------------------------------------------------------------------
 * 오타 및 간단한 오류 체크를 위한 자동 체크 기능 삽입
 ******************************************************************************/
// 1. main() 메소드 내의 //new AutoCheck(false); 문장의 주석을 아래와 같이 풀어라.
        new AutoCheck(false);
//
// 2. 그리고 아래 [자동 체크 소스 코드]에 있는 AutoCheck, Diff, InputOutput 등 
//    세 개의 클래스를 복사해 소스 파일의 P2 클래스 뒤쪽에 추가하라.
//
// 3. 그런 후 프로그램을 아래와 같이 실행하여 "OK" 출력이 나오면 [정상적]으로 구현된 것이다.
//
// AutoCheck 클래스는 사전에 정의된 추가 입력 세트에 대해 여러분의 프로그램을 대신 실행한 후
// 실행 결과를 정답 결과와 비교한다.
===============================================================================
// 여러분의 프로그램이 정상적으로 작동할 경우 아래와 같이 출력된다. 
===============================================================================
***********************
random numer seed? -1
***********************

auto check: OK  // 정상적으로 구현된 경우 OK가 출력되고
auto check: X   // 출력이 틀린 경우 X가 출력됨

/******************************************************************************
 * 어디가 잘못되었는지 찾고자 할 경우 
 ******************************************************************************/
// 만약 어디에서 잘못되었는지 확인하고 싶으면 아래처럼 매개변수를 true로 설정해 주면 된다.
        new AutoCheck(true);
===============================================================================


/******************************************************************************
 * 자동 체크 소스 코드 
 ******************************************************************************/

class AutoCheck 
{
    private ByteArrayOutputStream outStream;
    private Scanner     scanner;
    private PrintStream out;
    private PrintStream outBackup = System.out;
    private Scanner     scannerBackup = Executor.scanner;
    private Diff        diff;

    public AutoCheck(boolean debug) {
        System.out.println();
        Executor.autoCheck = true;
        diff = new Diff(debug);
        InputStream in = new ByteArrayInputStream(InputOutput.getInput());
        scanner = new Scanner(in);
        outStream = new ByteArrayOutputStream();
        out = new PrintStream(outStream);
        simaulate();
        out.close();
    }

    private void simaulate() {
        int scores[] = { 0 };
        setStreams();
        while (Executor.getInput()) {
        	Executor.run();
            scores[0] += evaluate();
            if (InputOutput.eof()) break;
        }
        restoreStreams();
        //System.out.println("score: "+scores[0]+" / "+InputOutput.getScore());
        boolean result = (scores[0] == InputOutput.getScore());
        System.out.println("auto check: "+(result? "OK": "X"));
    }

    private void setStreams() {
        Executor.scanner = scanner;
        outStream.reset();
        System.setOut(out);
    }
    private void restoreStreams() {
        Executor.scanner = scannerBackup;
        System.setOut(outBackup);
    }
    private int evaluate() {
        restoreStreams();
        int score = InputOutput.getScore();
        String answer = new String(InputOutput.getAnswer());
        boolean error = diff.check(outStream.toString(), answer);
        setStreams();
        InputOutput.next();
        return error? 0: score;
    }
}

class Diff 
{
    private String userLines[], correctLines[];
    private String userLine, correctLine;
    private String userTokens[], correctTokens[];
    private int userLnNum, correctLnNum;
    private int userIdx, correctIdx;
    private int lastErrorLine;
    private boolean debug;

    public Diff(boolean debug) {
        this.debug = debug;
    }
    
    private void reset() {
        userLine = "";
        correctLine = "";
        userTokens = new String[0];
        correctTokens = new String[0];
        userLnNum = correctLnNum = userIdx = correctIdx = lastErrorLine = 0;
   }

    public boolean check(String output, String correctString) { // true: error, false: ok
        if (printOutput) {
            printUserOutput(output);
            return false;
         }
        reset();
        userLines = output.split("\n");
        //for (int i = 0; i < userLines.length; i++)
        //    userLines[i] = userLines[i].stripTrailing();
        correctLines = correctString.split("\n");
        return diff();
    }
    
    private boolean diff() {
        String userToken, correctToken;
        boolean err = false;
        while (true) {
            userToken  = getUserNextToken();
            correctToken = getCorrectNextToken();
            if ((userToken == null) || (correctToken == null))
                break;
            if (!userToken.equals(correctToken)) {
                err = true;
                if (debug) printDebugMessage(userToken, correctToken);
                getUserNextLine();
                getCorrectNextLine();
             }
         }
        if ((userToken == null) && (correctToken == null))
            return err;

        if (debug && userToken != null) {
            System.out.println("User output has more lines than correct answer as follows.");
            printRemainingLines(userLines, "user line #", userLnNum-1, userLine);
         }
        else if (debug && correctToken != null) {
            System.out.println("Correct answer has more lines than user output as follows.");
            printRemainingLines(correctLines, "correct line #", correctLnNum-1, correctLine);
         }
        return true;
    }

    private void printDebugMessage(String userToken, String correctToken) {
        for (int i = lastErrorLine; i < userLnNum; i++)
            System.out.println(userLines[i]);
        lastErrorLine = userLnNum;
        System.out.println(correctLine+" [correct line]");
        System.out.println("User output(\""+userToken +"\") is not equal to correct output(\""+correctToken+"\")");
        System.out.print("continue[y/n]? ");
        String next = Executor.scanner.next();
        if (!next.equals("y") && !next.equals("Y")) {
            System.out.println("Good bye.");
            System.exit(0);
        }
    }

    private String getUserNextToken() {
        if (userLine == null)
            return null;
        if (userIdx == userTokens.length) {
            if (getUserNextLine() == null)
                return null;
         }
        return userTokens[userIdx++];
    }

    private String getCorrectNextToken() {
        if (correctLine == null)
            return null;
        if (correctIdx == correctTokens.length) {
            if (getCorrectNextLine() == null)
                return null;
         }
        return correctTokens[correctIdx++];
    }

    private String getUserNextLine() {
        for (int idx = -1; idx != 0; userLnNum++) {
            if (userLnNum == userLines.length)
                return (userLine = null);
            userLine = userLines[userLnNum].trim();
            if (userLine.equals(""))
                continue;
            userTokens = userLine.split("\\s");
            if (userTokens.length == 0)
                continue;
            idx = 0;
         }
        userIdx = 0;
        return userLine;
    }

    private String getCorrectNextLine() {
        for (correctIdx = -1; correctIdx != 0; correctLnNum++) {
            if (correctLnNum == correctLines.length)
                return (correctLine = null);
            correctLine = correctLines[correctLnNum].trim();
            if (correctLine.equals(""))
                continue;
            correctTokens = correctLine.split("\\s");
            if (correctTokens.length == 0)
                continue;
            correctIdx = 0;
         }
        return correctLine;
    }

    private boolean printOutput = false;

    private void printUserOutput(String output) {
        byte bytes[] = output.getBytes();
        for (int i = 0; i < bytes.length; ) {
            System.out.print("        ");
            for (int cnt = 0 ; cnt < 20 && i < bytes.length; cnt++, ++i)
                System.out.printf("%3d,", bytes[i]);
            System.out.println();
         }
        System.out.println("    }, {");
        //System.out.println(output);
    }

    private void printRemainingLines(String lines[], String msg, int lnNum, String ln) {
        System.out.println(msg+":"+(++lnNum)+":"+ln);
        for (; lnNum < lines.length; lnNum++)
            System.out.println(msg+":"+(lnNum+1)+":"+lines[lnNum]);
    }
    
}

class InputOutput {
    private static int answerIdx = 0;

    public static int getScore()     { return scores[answerIdx]; }
    public static byte[] getInput()  { return input.getBytes(); }
    public static byte[] getAnswer() { return answers[answerIdx]; }
    public static void next()        { answerIdx++; }
    public static boolean eof()      { return answerIdx >= answers.length; }
    
    private static int scores[] = { 25, 25,   50, };
    private static String input = "11 22 -1";
    private static byte answers[][] = {
        {
            42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
            42, 42, 42, 42, 42, 13, 10,114, 97,110,100,111,109, 32,110,117,109, 98,
           101,114, 32,115,101,101,100, 63, 32, 49, 49, 13, 10, 42, 42, 42, 42, 42,
            42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
            13, 10, 73, 68, 32, 32, 32, 76,105,115,116, 58,  9, 91, 49, 51, 44, 32,
            49, 52, 44, 32, 49, 53, 44, 32, 49, 49, 44, 32, 49, 50, 93, 13, 10, 78,
            97,109,101, 32, 76,105,115,116, 58,  9, 91,115, 97,110,100,121, 44, 32,
            98,111, 98, 44, 32, 97,108,105, 99,101, 44, 32,116,111,109, 44, 32,110,
            97,110, 97, 93, 13, 10, 13, 10, 73, 68, 32, 32, 32, 81,117,101,117,101,
            58,  9, 91, 49, 53, 44, 32, 49, 49, 44, 32, 49, 50, 93, 13, 10, 78, 97,
           109,101, 32, 81,117,101,117,101, 58,  9, 91,116,111,109, 44, 32,110, 97,
           110, 97, 93, 13, 10, 13, 10, 60, 73, 68, 44, 32, 78, 97,109,101, 62, 32,
            77, 97,112, 58,  9,123, 49, 51, 61,116,111,109, 44, 32, 49, 52, 61,110,
            97,110, 97,125, 13, 10, 60, 78, 97,109,101, 44, 32, 73, 68, 62, 32, 77,
            97,112, 58,  9,123, 97,108,105, 99,101, 61, 49, 50, 44, 32, 98,111, 98,
            61, 49, 49, 44, 32,115, 97,110,100,121, 61, 49, 53,125, 13, 10, 13, 10,
       }, {
            42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
            42, 42, 42, 42, 42, 13, 10,114, 97,110,100,111,109, 32,110,117,109, 98,
           101,114, 32,115,101,101,100, 63, 32, 50, 50, 13, 10, 42, 42, 42, 42, 42,
            42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
            13, 10, 73, 68, 32, 32, 32, 76,105,115,116, 58,  9, 91, 49, 51, 44, 32,
            49, 52, 44, 32, 49, 50, 44, 32, 49, 49, 44, 32, 49, 53, 93, 13, 10, 78,
            97,109,101, 32, 76,105,115,116, 58,  9, 91,116,111,109, 44, 32,110, 97,
           110, 97, 44, 32, 97,108,105, 99,101, 44, 32, 98,111, 98, 44, 32,115, 97,
           110,100,121, 93, 13, 10, 13, 10, 73, 68, 32, 32, 32, 81,117,101,117,101,
            58,  9, 91, 49, 50, 44, 32, 49, 49, 44, 32, 49, 53, 93, 13, 10, 78, 97,
           109,101, 32, 81,117,101,117,101, 58,  9, 91, 98,111, 98, 44, 32,115, 97,
           110,100,121, 93, 13, 10, 13, 10, 60, 73, 68, 44, 32, 78, 97,109,101, 62,
            32, 77, 97,112, 58,  9,123, 49, 51, 61, 98,111, 98, 44, 32, 49, 52, 61,
           115, 97,110,100,121,125, 13, 10, 60, 78, 97,109,101, 44, 32, 73, 68, 62,
            32, 77, 97,112, 58,  9,123, 97,108,105, 99,101, 61, 49, 53, 44, 32,110,
            97,110, 97, 61, 49, 49, 44, 32,116,111,109, 61, 49, 50,125, 13, 10, 13,
            10,
       }, 
    };
}

